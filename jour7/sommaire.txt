https://formation.webdevpro.net/react
login : react
password : fb

blog 
site internet 
page d'accueil => liste des articles 
page single => 1 article en particulier
page de connexion => formulaire de connexion
page de création de compte => login / password 
404 
back office 
    CRUD des articles 
    CRUD des profils users 

json-server (API / Base de données)

Partager des données entre les composants ( Redux )
Bootstrap (librairie css )

npm create vite
nom projet : blog 
technologie : React et Javascript 

cd blog
npm i
npm i bootstrap redux react-router-dom
npm i lodash joi 

// bootstrap => css mise en page 
// redux => state manager => state centralisé et partagé entre tous les composants 
// react-router-dom => navigation 
// lodash : librairie utilitaire cloneDeep traitement sur les objets
// joi : librairie verifier en profondeur les valeurs saisies dans un formulaire (sécurité)

npm run dev 

créer un composant Nav =>
barre de menu qui contient 3 liens 
    Accueil 
    créer profil 
    connexion 


------------------------------

toutes les notes sont disponibles sur le même github.com (que la période en distanciel)

https://github.com/webdevproformation/react-greta-dec2022


------------------------------

Router 

tableau dans lequel vous allez liste des url disponibles dans le site 

chaque url de la liste associer => composant 


https://prod.liveshare.vsengsaas.visualstudio.com/join?FA0AF0E04922F1D5F293B01D10D2537589A5



créer le menu 
créer le router 
créer les composants Home / Connexion / CreateProfil 
vu que ça marche !

remplir les composants avec données => state manager 
redux 
npm i redux 

import { createStore } from "redux" => déprécié

import { configureStore } from "@reduxjs/toolkit";


https://redux.js.org/introduction/why-rtk-is-redux-today

npm un redux ; supprimer la librairie redux dans le dossier node_modules 
npm i @reduxjs/toolkit


------------------------

google => redux dev tools
https://github.com/zalmoxisus/redux-devtools-extension



------------------------

npm i react-redux 
permettre dispatch et getState facilement sur n'importe quelle composant dans l'arborescence de notre application

------------------------


Cas pratique 
1 ajouter un bouton sous chaque article qui permet de supprimer un article 
2 useDispatch => modifier votre state 
3 ajouter une nouvelle action dans la fonction reductrice reducerArticle 


------------------------


Dans le composant Connexion


ajouter un formulaire contenant 2 champs
login et password

react et useRef() récupérer les valeurs saisies et afficher leur contenu dans la console du navigateur  



https://prod.liveshare.vsengsaas.visualstudio.com/join?EAC868F735A94E0971FC6A0FF3F894DF0580

https://prod.liveshare.vsengsaas.visualstudio.com/join?EAC868F735A94E0971FC6A0FF3F894DF0580


npm i -g json-server 
npm i axios redux-thunk 



json-server --watch db.json --port=3004

Protocole : 

GET GET http://localhost:3004/users
	  GET http://localhost:3004/users/1
      GET http://localhost:3004/users?login=...&password=....

POST POST http://localhost:3004/users { nom : "tutu" , login : "..." , password : "..." , role : "" }

PUT http://localhost:3004/users/1  { nom : "tata" , login : "..." , password : "..." , role : "" }
DELETE  http://localhost:3004/users/1

Requete SQL => demande à notre API 

https://prod.liveshare.vsengsaas.visualstudio.com/join?EAC868F735A94E0971FC6A0FF3F894DF0580


dans le composant CreateProfil 

créer un formulaire avec 4 champs 

nom 
login 
password 
verif password 

lorsque vous soumettez le formulaire récupérer les valeurs saisies 

vérifier que ces données sont conformes 
nom contient 4 lettres maximum 200 lettres pas de caractères ><
login contient 4 lettres maximum 200 lettres pas de caractères ><
password contient 4 lettres maximum 200 lettres pas de caractères ><
et vérifier que password === verif password 

----

=> appeler la base de données 
verifier que le login n'est pas déjà utilisé 

=> ajouter le profil dans la table users 
POST 


------------------------

Firebase 

=> https://formation.webdevpro.net/angular
login : angular
password : google 

Chapitre 13 

programmation reactive => https://rxjs.dev/

https://www.youtube.com/watch?v=cyy5m4MdRuU

malik.h@webdevpro.net






